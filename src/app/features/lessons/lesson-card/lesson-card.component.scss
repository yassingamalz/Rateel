// lesson-card.component.scss
@use "sass:map";
@use 'variables' as vars;
@use 'mixins' as mix;

.lesson-card {
  position: relative;
  width: 280px;
  height: 200px; // Fixed height for all cards
  border-radius: map.get(vars.$border-radius, 'lg');
  background: rgba(27, 67, 50, 0.3);
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  overflow: hidden;
  margin: 0 map.get(vars.$spacing, 'md');
  border: 1px solid rgba(255, 255, 255, 0.1);

  &:hover:not(&--locked) {
    transform: translateY(-4px);
    border-color: rgba(map.get(vars.$colors, 'accent', 'base'), 0.5);
    background: rgba(27, 67, 50, 0.5);

    .lesson-card__title {
      color: map.get(vars.$colors, 'accent', 'base');
    }

    .lesson-card__description {
      color: rgba(map.get(vars.$colors, 'accent', 'base'), 1);
    }
  }

  &--locked {
    opacity: 0.7;
    cursor: not-allowed;
    background: rgba(0, 0, 0, 0.3);
  }

  &--active {
    background: map.get(vars.$colors, 'accent', 'base');
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow:
      0 0 0 2px map.get(vars.$colors, 'accent', 'base'),
      0 0 20px rgba(map.get(vars.$colors, 'accent', 'base'), 0.4);

    .lesson-card__title,
    .lesson-card__description {
      color: map.get(vars.$colors, 'text', 'dark');
    }
  }

  &--completed {
    background: rgba(map.get(vars.$colors, 'accent', 'base'), 0.15);
    border-color: rgba(map.get(vars.$colors, 'accent', 'base'), 0.3);
  }

  &__progress {
    position: absolute;
    top: map.get(vars.$spacing, 'sm');
    right: map.get(vars.$spacing, 'sm');
    min-width: 48px;
    height: 28px;
    border-radius: 14px;
    background: map.get(vars.$colors, 'accent', 'base');
    color: map.get(vars.$colors, 'text', 'dark');
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    font-weight: 600;
    padding: 0 map.get(vars.$spacing, 'sm');
    z-index: 2;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  &__content {
    position: relative;
    height: 100%;
    padding: map.get(vars.$spacing, 'lg');
    display: flex;
    flex-direction: column;
    z-index: 1;
  }

  &__header {
    margin-bottom: map.get(vars.$spacing, 'sm');
    flex: 1; // Allow header to take available space
  }

  &__title {
    font-family: 'Cairo', sans-serif;
    font-size: 1.25rem;
    font-weight: 600;
    color: map.get(vars.$colors, 'text', 'light');
    margin-bottom: map.get(vars.$spacing, 'sm');
    line-height: 1.4;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    max-height: 2.8em; // Maximum height for 2 lines
  }

  &__description {
    color: rgba(255, 255, 255, 0.8);
    font-size: 0.875rem;
    line-height: 1.6;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin: 0;
  }

  &__footer {
    margin-top: auto; // Push footer to bottom
    padding-top: map.get(vars.$spacing, 'md');
    display: flex;
    align-items: center;
    justify-content: flex-start;
    min-height: 24px; // Consistent height for footer
  }

  &__duration {
    display: inline-flex;
    align-items: center;
    gap: map.get(vars.$spacing, 'xs');
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.875rem;

    &::before {
      content: '‚è±';
      font-size: 1rem;
    }
  }

  &__lock-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3;
  }

  &__lock {
    font-size: 2rem;
    opacity: 0.8;
  }

  &.border-fill-animation-active {
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      border: 2px solid transparent;
      border-radius: inherit;
      animation: rectangularBorderFill 1.5s cubic-bezier(0.4, 0, 0.2, 1);
      pointer-events: none;
    }
  }
}

@keyframes rectangularBorderFill {
  0% {
    border-top-color: map.get(vars.$colors, 'accent', 'base');
    border-right-color: transparent;
    border-bottom-color: transparent;
    border-left-color: transparent;
    filter: drop-shadow(0 0 6px map.get(vars.$colors, 'accent', 'glow'));
  }
  25% {
    border-top-color: map.get(vars.$colors, 'accent', 'base');
    border-right-color: map.get(vars.$colors, 'accent', 'base');
    border-bottom-color: transparent;
    border-left-color: transparent;
  }
  50% {
    border-top-color: map.get(vars.$colors, 'accent', 'base');
    border-right-color: map.get(vars.$colors, 'accent', 'base');
    border-bottom-color: map.get(vars.$colors, 'accent', 'base');
    border-left-color: transparent;
  }
  75% {
    border-top-color: map.get(vars.$colors, 'accent', 'base');
    border-right-color: map.get(vars.$colors, 'accent', 'base');
    border-bottom-color: map.get(vars.$colors, 'accent', 'base');
    border-left-color: map.get(vars.$colors, 'accent', 'base');
  }
  100% {
    opacity: 0;
  }
}
